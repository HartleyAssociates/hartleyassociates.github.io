@mixin componentHeading {
  i {
    display: block;
    color: $primary-colour;
  }
}

@mixin componentHeadingDefault {
  font-size: px-to-rem(20px);

  @media only screen and (min-width: 800px) {
    font-size: px-to-rem(32px);
  }
}

@mixin componentHeadingLarge {
  font-size: px-to-rem(25px);

  @media only screen and (min-width: 800px) {
    font-size: px-to-rem(40px);
  }
}

// Columns
@mixin columnsMixin {
  &__container {
    @extend %containerDefault;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: flex-start;
    grid-column-gap: px-to-rem(20px);
    grid-row-gap: px-to-rem(20px);

    @media only screen and (min-width: 1024px) {
      grid-column-gap: px-to-rem(30px);
    }

    @media only screen and (min-width: 1200px) {
      grid-column-gap: px-to-rem(50px);
    }

    &--stretch {
      align-items: stretch;
    }
  }

  &__col {
    flex: 0 0 100%;

    &--2 {
      @media only screen and (min-width: 800px) {
        flex: 0 0 calc(50% - #{px-to-rem(math.div(20px, 2))});
      }

      @media only screen and (min-width: 1024px) {
        flex: 0 0 calc(50% - #{px-to-rem(math.div(30px, 2))});
      }

      @media only screen and (min-width: 1200px) {
        flex: 0 0 calc(50% - #{px-to-rem(math.div(50px, 2))});
      }
    }

    &--3 {
      @media only screen and (min-width: 800px) {
        flex: 0 0 calc(33.333% - #{px-to-rem(round(math.div(40px, 3)) + 1px)});
      }

      @media only screen and (min-width: 1024px) {
        flex: 0 0 calc(33.333% - #{px-to-rem(round(math.div(60px, 3)))});
      }

      @media only screen and (min-width: 1200px) {
        flex: 0 0 calc(33.333% - #{px-to-rem(round(math.div(100px, 3)) + 1px)});
      }
    }

    &--4 {
      @media only screen and (min-width: 800px) {
        flex: 0 0 calc(50% - #{px-to-rem(math.div(20px, 2))});
      }

      @media only screen and (min-width: 1024px) {
        flex: 0 0 calc(25% - #{px-to-rem(math.div(90px, 4))});
      }

      @media only screen and (min-width: 1200px) {
        flex: 0 0 calc(25% - #{px-to-rem(math.div(150px, 4))});
      }
    }

    &--mob-order {
      &-1 {
        @media only screen and (max-width: 799px) {
          order: 1;
        }
      }

      &-2 {
        @media only screen and (max-width: 799px) {
          order: 2;
        }
      }

      &-3 {
        @media only screen and (max-width: 799px) {
          order: 3;
        }
      }

      &-4 {
        @media only screen and (max-width: 799px) {
          order: 4;
        }
      }
    }
  }
}

@mixin imageFilter {
  // background: $primary-colour;
  background: $black-colour;
  // background: linear-gradient(0deg, rgba($primary-colour, 1) 60%, rgba($black-colour, 1) 100%);

  img {
    filter: grayscale(1);
    opacity: 0.8;
  }
}
